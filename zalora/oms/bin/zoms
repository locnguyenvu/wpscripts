#!/bin/bash

if [ -L "$0" ] ; then
    CURDIR=$(dirname $(readlink -n "$0"))
else
    CURDIR=$(pwd)
fi

ROOTDIR=$(dirname $CURDIR)
DOCKERDIR="${ROOTDIR}/docker"
OMSCONTAINERNAME="zalora_oms"

function print_help() {
    if [[ -L "$0" ]] ; then
        DOCDIR=$(dirname $(dirname $0))/docs
    else
        DOCDIR=$CURDIR/../../../docs
    fi
    cat $DOCDIR/zoms.txt
}

function execute_oms_command() {
    if [ $(docker ps --filter name=zalora_oms$ --format {{.ID}} | wc -l) -lt 1 ]; then
        echo "Zalora OMS container has not started yet!"
        exit 1
    fi

    declare -a command_arr
    command_arr=( 'XDEBUG_MODE=develop && php' 'oms/cli/index.php' '--env=dev' )
    args=( "$@" )
    commandPattern=${args[0]}

    module=`echo $commandPattern | cut -d/ -f1`
    controller=`echo $commandPattern | cut -d/ -f2`
    action=`echo $commandPattern | cut -d/ -f3`

    command_arr+=( '--module='${module} )
    command_arr+=( '--controller='${controller} )
    command_arr+=( '--action='${action:-main} )

    if [ $2 ]; then
        for i in ${args[@]:1}
        do
            command_arr+=( $i )
        done
    fi
    EXECUTE_COMMAND="${command_arr[@]}"
    docker exec -it $OMSCONTAINERNAME sh -c "$EXECUTE_COMMAND"
}

function db_migration() {
    PROJECT_DIR=$(docker inspect zalora_oms --format='{{json .HostConfig.Mounts}}' | jq '.[0].Source' | sed 's/"//g')

    if [ $(git -C "$PROJECT_DIR" status -s | grep "oms/application/configs/dataMigrations.php" | wc -l) -eq 1 ]; then
        echo 'Update data only'
        execute_oms_command maintenance/schema-updater/data-migration
    elif [ $(git -C "$PROJECT_DIR" status -s | grep "oms/application/configs/migrations.php" | wc -l) -eq 1 ]; then
        echo 'Update schema/table structure'
        execute_oms_command maintenance/schema-updater/dbtable
    else
        echo 'Not data/schema change'
    fi
}

if [ -z $1 ]; then
    print_help
    exit 1
fi

if [ "$1" = 'docker' ]; then
    command=$2
    if [ $command = 'init' ]; then

        if [ ! -f $DOCKERDIR'/.env' ]; then
            touch $DOCKERDIR'/.env'
        fi
        
        if [ $(cat $DOCKERDIR'/.env' | grep PROJECT_DIR | wc -l) -lt 1 ]; then
            echo "OMS project directory path:"
            read PROJECT_DIR
            echo "PROJECT_DIR="$PROJECT_DIR >> $DOCKERDIR'/.env'
        fi
        
        echo "Select php version: "
        SUPPORT_VERSIONS=$(find $DOCKERDIR -type f -name "*.yml" | while read file; do echo $(basename $file | sed 's/\.yml//g'); done)
        select version in $SUPPORT_VERSIONS
        do
            break
        done

        docker-compose -f "${DOCKERDIR}/${version}.yml" -p zalora_oms up --build --remove-orphans -d
    elif [ $command = 'start' ]; then
        if [ $(docker container ls -a --filter name=zalora_oms$ --format {{.ID}} | wc -l) -eq 0 ]; then
            echo 'Docker container not found. Run command to init containers zoms docker init'
            exit
        fi

        version=$(docker container ls -a --filter name=zalora_oms$ --format {{.Image}} | grep -ioh "php7.$")

        if [ $(find $DOCKERDIR -type f -name "${version}.yml" | wc -l) -eq 0 ]; then
            echo "Invalid version"
            exit
        fi
        docker-compose -f "${DOCKERDIR}/${version}.yml" --env-file "${DOCKERDIR}/.env" -p zalora_oms start
    elif [ $command = 'stop' ]; then
        find $DOCKERDIR -type f -name "*.yml" | while read file; do docker-compose -f $file --env-file "${DOCKERDIR}/.env" -p zalora_oms stop; done
    elif [ $command = 'restart' ]; then
        find $DOCKERDIR -type f -name "*.yml" | while read file; do docker-compose -f $file  --env-file "${DOCKERDIR}/.env"-p zalora_oms restart; done
    fi
    exit

elif [ $1 = 'init-queue' ]; then 
    RABBITMQCONTAINERID=$(docker ps --filter ancestor=rabbitmq:management --format {{.ID}})
    if [  $RABBITMQCONTAINERID ]; then
        echo $'\n# Setup rabbitmq...'
        docker exec "$RABBITMQCONTAINERID" bash -c "rabbitmqctl start_app"
        docker exec "$RABBITMQCONTAINERID" bash -c "rabbitmqctl add_vhost /id"
        docker exec "$RABBITMQCONTAINERID" bash -c "rabbitmqctl set_permissions -p '/id' 'guest' '.*' '.*' '.*'"
    
        RABBITMQADMIN="$CURDIR"'/rabbitmqadmin'
        curl -s localhost:15672/cli/rabbitmqadmin >| $RABBITMQADMIN
        chmod +x "$RABBITMQADMIN"
        eval "$RABBITMQADMIN declare exchange --vhost=/id name=oms type=topic"
        rm -rf "$RABBITMQADMIN"
    fi
    execute_oms_command external/rabbitmq/setup
    exit 1

elif [ $1 = 'db-migrate' ]; then
    db_migration
    exit 1

elif [ $1 = 'run' ]; then
    if [ ${#@} -lt 2 ]; then
        echo 'Err! Command is missing'
        exit 1
    fi
    shift
    execute_oms_command $@
    exit 1

elif [ $1 = 'clearcache' ]; then
    MEMCACHEID=$(docker ps --filter ancestor=memcached:1.6.7 --format {{.ID}})
    if [ -z $MEMCACHEID ]; then
        echo 'Docker has not been started yet'
        exit 1
    fi
    docker restart $MEMCACHEID
    exit 1
fi
