#!/bin/bash

if [ -L "$0" ] ; then
    CURDIR=$(dirname $(readlink -n "$0"))
else
    CURDIR=$(pwd)
fi

ROOTDIR=$(dirname $CURDIR)
OMSIMAGES=(baseimage nginx fpm)
SUPPORTVERSIONS=( php72 php74 )


function replace_string_in_file() {
    sedpattern=$1
    filepath=$2
    systemname=$(uname -s)
    case "${systemname}" in
        Linux*) sed -i $sedpattern $filepath;;
        Darwin*) sed -i '' -e $sedpattern $filepath;;
    esac
}

function print_help() {
    if [[ -L "$0" ]] ; then
        DOCDIR=$(dirname $(dirname $0))/docs
    else
        DOCDIR=$CURDIR/../../../docs
    fi
    cat $DOCDIR/zoms.txt
}

function get_active_version() {
    for version in "${SUPPORTVERSIONS[@]}"; do
        IMAGETAG='oms/fpm:'"${version/\//}"
        COUNTACTIVE=$(docker ps --filter ancestor="$IMAGETAG" --format {{.ID}} | wc -l)
        if [ $COUNTACTIVE -eq 1 ]; then
            echo $version
            return
        fi
    done
}

if [ -z $1 ]; then
    print_help
    exit 1
fi

if [ "$1" = 'ps' ]; then
    ACTIVE_VERSION=$(get_active_version)
    if [ -z $ACTIVE_VERSION ]; then
        echo 'Environment has not started yet'
    else
        echo 'Current version: '"$ACTIVE_VERSION"
        docker-compose -f "$ROOTDIR/$ACTIVE_VERSION/docker-compose.yml" -p "oms_$ACTIVE_VERSION" ps
    fi
    exit 1

elif [ "$1" = 'ssh' ]; then
    cd "$ROOTDIR"
    read -a versions <<< $(echo */)
    for version in "${versions[@]}"; do
        FPMIMAGEID=$(docker ps --filter ancestor='oms/fpm:'"${version/\//}" --format {{.ID}})
        if [ -z $FPMIMAGEID ]; then
            continue
        else
            docker exec -it "$FPMIMAGEID" bash
            exit 1
        fi
    done
    exit 1

elif [ "$1" = 'stop' ]; then
    ACTIVE_VERSION=$(get_active_version)
    if [ -z $ACTIVE_VERSION ]; then
        exit 1
    fi
    cd "$ROOTDIR/$ACTIVE_VERSION"
    docker-compose -p 'oms_'"$ACTIVE_VERSION" -f docker-compose.yml stop

elif [ "$1" = 'restart' ]; then
    ACTIVE_VERSION=$(get_active_version)
    if [ -z $ACTIVE_VERSION ]; then
        exit 1
    fi
    cd "$ROOTDIR/$ACTIVE_VERSION"
    docker-compose -p 'oms_'"$ACTIVE_VERSION" -f docker-compose.yml stop
    docker-compose -p 'oms_'"$ACTIVE_VERSION" -f docker-compose.yml up -d

elif [ "$1" = 'setup' ]; then
    IS_ACTIVE=$(get_active_version)
    if [ -z $IS_ACTIVE ]; then
        echo 'Envinronment has not start yet'
        exit 1
    fi
    RABBITMQCONTAINERID=$(docker ps --filter ancestor=rabbitmq:management --format {{.ID}})
    if [  $RABBITMQCONTAINERID ]; then
        echo $'\n# Setup rabbitmq...'
        docker exec "$RABBITMQCONTAINERID" bash -c "rabbitmqctl start_app"
        docker exec "$RABBITMQCONTAINERID" bash -c "rabbitmqctl add_vhost vn"
        docker exec "$RABBITMQCONTAINERID" bash -c "rabbitmqctl set_permissions -p 'vn' 'guest' '.*' '.*' '.*'"
    
        RABBITMQADMIN="$CURDIR"'/rabbitmqadmin'
        curl localhost:15672/cli/rabbitmqadmin >| $RABBITMQADMIN
        chmod +x "$RABBITMQADMIN"
        eval "$RABBITMQADMIN declare exchange --vhost=vn name=oms type=topic"
        rm -rf "$RABBITMQADMIN"
    fi

elif [ $1 = 'run' ]; then
    if [ ${#@} -lt 2 ]; then
        echo 'Err! Command is missing'
        exit 1
    fi
    cd "$ROOTDIR"

    OIFS="$IFS"
    IFS='/'
    read -a chunks <<< "$2"

    EXEC_COMMAND='php oms/cli/index.php --env=dev --module='"${chunks[0]}"' --controller='"${chunks[1]}"' --action='"${chunks[2]}"

    echo $EXEC_COMMAND 
    echo $'\n'

    IFS=' '
    read -a versions <<< $(echo */)

    for version in "${versions[@]}"; do
        IMAGETAG='oms/fpm:'"${version/\//}"
        docker ps --filter ancestor="$IMAGETAG" --format '{{.ID}}' | \
            while read dockerid ; do docker exec "$dockerid" bash -c "$EXEC_COMMAND" ; done
    done

    IFS="$OIFS"
    exit 1
fi


# Build images

if [ ! -d "$ROOTDIR/$2" ]; then
    echo $'Version not support: '"$ROOTDIR/$2"
    exit 1
fi
VERSION=$2
VERSONDIR="$ROOTDIR/$2"
cd $VERSONDIR

if [ $1 = 'build' ]; then
    if [ ${#@} -lt 2 ]; then
        echo 'Err! Version is missing'
        exit 1
    fi
    for IMAGE in ${OMSIMAGES[@]} ; do
        echo "* oms/$IMAGE:$VERSION..."
        IMAGETAG="oms/$IMAGE:$VERSION"
        CONTAINERID=$(docker container ls -a --filter ancestor="$IMAGETAG" --format {{.ID}})
        if [ ! -z "$CONTAINERID" ]; then
            docker container ls -a --filter ancestor="$IMAGETAG" --format {{.ID}} | \
                while read line; do 
                    echo "Removing container existent containers..."
                    docker stop "$line" 
                    docker rm "$line"
                done
        fi
        docker build -q -t 'oms/'"$IMAGE"':'"$VERSION" "$IMAGE"
    done

    DOCKERCOMPOSEFILE="$VERSONDIR"'/docker-compose.yml'
    cp "$ROOTDIR/docker-compose-template.yml" $DOCKERCOMPOSEFILE
    if [ -z $OMS_PROJ_PATH ]; then
        read -p "- oms path: " OMS_PROJ_PATH
    fi
    replace_string_in_file 's/%version%/'"$VERSION"'/g' $DOCKERCOMPOSEFILE
    replace_string_in_file 's/%project_path%/'"${OMS_PROJ_PATH//\//\\/}"'/g' $DOCKERCOMPOSEFILE
elif [ $1 = 'start' ]; then 
    if [ ${#@} -lt 2 ]; then
        echo 'Err! Version is missing'
        exit 1
    fi
    docker-compose -p 'oms_'"$VERSION" -f docker-compose.yml up -d
fi

