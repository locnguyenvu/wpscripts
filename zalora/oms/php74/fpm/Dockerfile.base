############################################################################
# Docker build file for php-fpm, using for oms web
#############################################################################

FROM php:7.0.26-fpm

# Version constants
ENV MEMCACHE_VERSION    memcache-3.0.8
ENV MEMCACHED_VERSION   memcached-3.0.3
ENV AMQP_VERSION        amqp-1.7.0
ENV GRAPHVIZ_VERSION    graphviz-2.38.0
ENV JAVA_VERSION        openjdk-7-jdk
ENV JAVA_HOME           /usr/lib/jvm/java-7-openjdk-amd64

# Install dependencies

RUN apt-get update && \
    apt-get install -y \
        zlib1g-dev \
        libncurses5-dev \
        librabbitmq-dev \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng12-dev \
        libmemcached-dev \
        wget \
        cron \
        supervisor \
        vim \
        nano \
        git \
        python-pip \
        $JAVA_VERSION \
        sudo \
        unzip

# Later version breaks pip. https://github.com/aws/aws-cli/issues/3678
RUN pip install awscli==1.16.38

# Graphviz
RUN curl -L "http://pkgs.fedoraproject.org/repo/pkgs/graphviz/$GRAPHVIZ_VERSION.tar.gz/5b6a829b2ac94efcd5fa3c223ed6d3ae/$GRAPHVIZ_VERSION.tar.gz" >> "/tmp/$GRAPHVIZ_VERSION.tar.gz" && \
    tar -xf "/tmp/$GRAPHVIZ_VERSION.tar.gz" -C /tmp/ && \
    rm  "/tmp/$GRAPHVIZ_VERSION.tar.gz" && \
    cd "/tmp/$GRAPHVIZ_VERSION" && \
    ./configure && \
    make && \
    make install

RUN docker-php-ext-configure gd \
    --with-freetype-dir=/usr/include/ \
    --with-jpeg-dir=/usr/include/

# Download php extensions
RUN git clone -b php7 https://github.com/websupport-sk/pecl-memcache.git /usr/src/php/ext/pecl-memcache
RUN git clone -b php7 https://github.com/php-memcached-dev/php-memcached /usr/src/php/ext/pecl-memcached
RUN curl -L "http://pecl.php.net/get/$AMQP_VERSION.tgz" >> /usr/src/php/ext/amqp.tgz && \
    tar -xf /usr/src/php/ext/amqp.tgz -C /usr/src/php/ext/ && \
    rm /usr/src/php/ext/amqp.tgz

# Configure php extensions
RUN echo gd             >> /usr/src/php-available-exts
RUN echo pecl-memcache  >> /usr/src/php-available-exts
RUN echo $AMQP_VERSION  >> /usr/src/php-available-exts
RUN echo pecl-memcached >> /usr/src/php-available-exts

# Install php extensions
RUN docker-php-ext-install \
    bcmath \
    pdo_mysql \
    pcntl \
    pecl-memcache \
    pecl-memcached \
    $AMQP_VERSION \
    gd \
    zip \
    opcache

ADD extensions/* /usr/local/lib/php/extensions/no-debug-non-zts-20151012/
RUN echo "extension=amazon-elasticache-cluster-client.so" | tee /usr/local/etc/php/conf.d/docker-php-ext-memcached.ini

## New relic daemon
RUN wget -r -nd --no-parent -Alinux.tar.gz \
    http://download.newrelic.com/php_agent/release/ >/dev/null 2>&1 \
    && tar -xzf newrelic-php*.tar.gz --strip=1
ENV NR_INSTALL_SILENT  true
ENV NR_INSTALL_PHPLIST /usr/local/bin
RUN bash  newrelic-install install
RUN cp    /etc/newrelic/newrelic.cfg.template /etc/newrelic/newrelic.cfg
RUN touch /var/run/newrelic-daemon.pid

# Blackfire profiling
RUN wget -O - https://packagecloud.io/blackfire-io/stable/gpgkey | apt-key add -  && \
    echo "deb http://packages.blackfire.io/debian any main" | tee /etc/apt/sources.list.d/blackfire.list && \
    apt-get update && \
    apt-get install -y blackfire-agent blackfire-php


# Build agruments
# ARG APPLICATION_ENV
# ARG APPLICATION_VENTURE

# Copy configuration files
RUN mkdir -p /var/log/supervisor /etc/php-fpm.d/
ADD config/php7/php-fpm.conf                /usr/local/etc/php-fpm.conf
ADD config/php7/www.conf                    /etc/php-fpm.d/www.conf
ADD config/php.ini                          /usr/local/etc/php/php.ini
ADD supervisord.configs/supervisord.conf    /etc/supervisor/conf.d/supervisord.conf
ADD supervisord.configs/daemons.conf        /etc/supervisor/conf.d/daemons.conf
ADD config/newrelic.ini                     /usr/local/etc/php/conf.d/newrelic.ini
ADD awslogs/awslogs-agent-setup.py          /tmp/awslogs-agent-setup.py
ADD awslogs/generate-awslogs-config.py      /tmp/generate-awslogs-config.py
ADD awslogs/log-files.txt                   /tmp/log-files.txt
ADD blackfire/blackfire-agent.ini           /etc/blackfire/agent
ADD blackfire/blackfire-cli.ini             /root/.blackfire.ini
ADD blackfire/blackfire-php.ini             $PHP_INI_DIR/conf.d/zz-blackfire.ini

# awslogs-agent
# RUN python /tmp/generate-awslogs-config.py ${APPLICATION_VENTURE} ${APPLICATION_ENV}
# RUN python /tmp/awslogs-agent-setup.py -n -r ap-southeast-1 -c /tmp/awslogs.conf

# fpm config file
# ADD config/php7/zz-docker.conf /tmp/zz-docker.conf
# RUN sed -e "s;%APPLICATION_VENTURE%;${APPLICATION_VENTURE};g" /tmp/zz-docker.conf > /tmp/zz-docker_venture.conf
# RUN sed -e "s;%APPLICATION_ENV%;${APPLICATION_ENV};g" /tmp/zz-docker_venture.conf > /etc/php-fpm.d/zz-docker.conf

# X-Ray
RUN mkdir xray-daemon && cd xray-daemon
RUN curl https://s3.dualstack.ap-southeast-1.amazonaws.com/aws-xray-assets.ap-southeast-1/xray-daemon/aws-xray-daemon-linux-2.x.zip -o ./aws-xray-daemon-linux-2.x.zip
RUN unzip -o aws-xray-daemon-linux-2.x.zip -d .
RUN cp xray /usr/bin/xray-daemon

# Cleanup
RUN rm -rf /var/lib/apt/lists/*

# Share socket to nginx
VOLUME ["/var/run", "/var/www/oms"]

# Working dir
WORKDIR /var/www/oms

# ENTRYPOINT
# ADD entrypoint/${APPLICATION_ENV}           /usr/bin/init_fpm
# RUN chmod +x /usr/bin/init_fpm
# ENV FPM_LOG_FILE_PATH /shop/logs/${APPLICATION_VENTURE}/${APPLICATION_ENV}/oms
# ENV CMD_CREATE_LOG_FILE "mkdir -pv ${FPM_LOG_FILE_PATH} && touch ${FPM_LOG_FILE_PATH}/fpm.log"
# ENV TERM xterm
# CMD ["sh", "-c", "eval ${CMD_CREATE_LOG_FILE} && tail -f $FPM_LOG_FILE_PATH/fpm.log & eval ${CMD_CREATE_LOG_FILE} && init_fpm >> $FPM_LOG_FILE_PATH/fpm.log"]
CMD ["php-fpm"]
